import math
from queue import PriorityQueue
import tkinter as tk
from tkinter import ttk, messagebox

# ---------- Data Setup ----------

locations = {
    "Academic Block 1": (0, 0),
    "Academic Block 2": (2, 1),
    "Academic Block 3": (4, 0),
    "Hostel Block 1": (1, -2),
    "Hostel Block 2": (3, -2),
    "Faculty Residential": (5, 1),
    "Main Gate": (0, 3),
    "Inner Gate": (2, 3),
    "Research Labs": (4, 3),
    "Food Court": (1, 1),
    "Cricket Pitch": (3, -1),
    "Football Ground": (5, -1),
}

graph = {
    "Academic Block 1": {"Academic Block 2": 2, "Hostel Block 1": 3, "Main Gate": 4},
    "Academic Block 2": {"Academic Block 1": 2, "Academic Block 3": 2, "Inner Gate": 2, "Food Court": 1},
    "Academic Block 3": {"Academic Block 2": 2, "Faculty Residential": 3, "Research Labs": 2},
    "Hostel Block 1": {"Academic Block 1": 3, "Hostel Block 2": 2, "Cricket Pitch": 3},
    "Hostel Block 2": {"Hostel Block 1": 2, "Football Ground": 2, "Faculty Residential": 3},
    "Faculty Residential": {"Academic Block 3": 3, "Hostel Block 2": 3, "Research Labs": 1},
    "Main Gate": {"Academic Block 1": 4, "Inner Gate": 2},
    "Inner Gate": {"Main Gate": 2, "Academic Block 2": 2, "Research Labs": 2},
    "Research Labs": {"Inner Gate": 2, "Academic Block 3": 2, "Faculty Residential": 1},
    "Food Court": {"Academic Block 2": 1, "Cricket Pitch": 2},
    "Cricket Pitch": {"Food Court": 2, "Hostel Block 1": 3, "Football Ground": 2},
    "Football Ground": {"Cricket Pitch": 2, "Hostel Block 2": 2},
}

# ---------- A* Algorithm with Step-by-Step Process ----------

def euclidean_heuristic(node, goal):
    x1, y1 = locations[node]
    x2, y2 = locations[goal]
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

def a_star_search_with_steps(start, goal):
    open_set = PriorityQueue()
    open_set.put((0, start))
    came_from = {}
    g_score = {node: float('inf') for node in locations}
    g_score[start] = 0
    f_score = {node: float('inf') for node in locations}
    f_score[start] = euclidean_heuristic(start, goal)

    explored_nodes = set()
    steps = []  # Store steps for display

    while not open_set.empty():
        current = open_set.get()[1]
        explored_nodes.add(current)

        steps.append(f"Exploring node: {current}")

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            steps.append(f"Goal reached! Path constructed.")
            return path[::-1], g_score[goal], len(explored_nodes), steps

        for neighbor in graph.get(current, {}):
            tentative_g = g_score[current] + graph[current][neighbor]
            steps.append(f"Checking neighbor: {neighbor}, tentative_g: {tentative_g:.2f}")

            if tentative_g < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g
                f_score[neighbor] = tentative_g + euclidean_heuristic(neighbor, goal)
                open_set.put((f_score[neighbor], neighbor))
                steps.append(f"Updated {neighbor}: g={g_score[neighbor]:.2f}, f={f_score[neighbor]:.2f}")

    steps.append("No path found.")
    return None, float('inf'), len(explored_nodes), steps

# ---------- GUI Implementation ----------

def find_path():
    start = start_var.get()
    goal = goal_var.get()

    if start not in locations or goal not in locations:
        messagebox.showerror("Error", "Invalid location selected!")
        return

    path, distance, nodes_explored, steps = a_star_search_with_steps(start, goal)

    if path:
        result_text.set(
            f"Recommended Path:\n{' -> '.join(path)}\n\n"
            f"Total Distance: {distance:.2f} units\n"
            f"Nodes Explored: {nodes_explored}"
        )

        # Display step-by-step process
        steps_display.delete(1.0, tk.END)
        steps_display.insert(tk.END, "\n".join(steps))
    else:
        result_text.set("No path found between the selected locations.")
        steps_display.delete(1.0, tk.END)

# GUI Setup
root = tk.Tk()
root.title("Campus Navigator - BotBrain (Step-by-Step Search)")
root.geometry("700x600")

tk.Label(root, text="Select Current Location:").pack(pady=5)
start_var = tk.StringVar()
start_dropdown = ttk.Combobox(root, textvariable=start_var, width=50)
start_dropdown['values'] = list(locations.keys())
start_dropdown.pack(pady=5)

tk.Label(root, text="Select Destination:").pack(pady=5)
goal_var = tk.StringVar()
goal_dropdown = ttk.Combobox(root, textvariable=goal_var, width=50)
goal_dropdown['values'] = list(locations.keys())
goal_dropdown.pack(pady=5)

tk.Button(root, text="Find Best Path", command=find_path).pack(pady=20)

result_text = tk.StringVar()
tk.Label(root, textvariable=result_text, wraplength=650, justify="left").pack(pady=10)

tk.Label(root, text="Step-by-Step Search Process:").pack(pady=5)
steps_display = tk.Text(root, wrap=tk.WORD, height=20, width=80)
steps_display.pack(pady=5)

root.mainloop()
